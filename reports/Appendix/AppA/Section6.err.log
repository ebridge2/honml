Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/asyncio/base_events.py", line 687, in run_until_complete
    return future.result()
           ^^^^^^^^^^^^^^^
  File "/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axisartist import SubplotZero
import matplotlib.patches as patch

class myAxes():
    
    def __init__(self, fig, rect, xlim=(-5,5), ylim=(-5,5)):
        self.xlim = xlim
        self.ylim = ylim
        self.fig = fig
        self.rect = rect
        self.__scale_arrows()
    
    def __drawArrow(self, x, y, dx, dy, width, length):
        self.ax.arrow(
            x, y, dx, dy, 
            color       = 'k',
            clip_on     = False, 
            head_width  = self.head_width, 
            head_length = self.head_length
        ) 
        
    def __scale_arrows(self):
        """ Make the arrows look good regardless of the axis limits """
        xrange = self.xlim[1] - self.xlim[0]
        yrange = self.ylim[1] - self.ylim[0]
        
        self.head_width  = min(xrange/30, 0.25)
        self.head_length = min(yrange/30, 0.3)
        
    def __drawAxis(self):
        """
        Draws the 2D cartesian axis
        """
        self.ax = SubplotZero(self.fig, self.rect)
        self.fig.add_subplot(self.ax)
        
        # make xzero axis (horizontal axis line through y=0) visible.
        for axis in ["xzero","yzero"]:
            self.ax.axis[axis].set_visible(True)
        # make the other axis (left, bottom, top, right) invisible
        for n in ["left", "right", "bottom", "top"]:
            self.ax.axis[n].set_visible(False)
            
        # Plot limits
        self.ax.set_xlim(self.xlim)
        self.ax.set_ylim(self.ylim)
        self.ax.set_yticks([-1, 1, ])
        self.ax.set_xticks([-1, 0, 1])
        # Draw the arrows
        self.__drawArrow(self.xlim[1], 0, 0.01, 0, 0.3, 0.2) # x-axis arrow
        self.__drawArrow(0, self.ylim[1], 0, 0.01, 0.2, 0.3) # y-axis arrow
        
    def draw(self):
        # First draw the axis
        self.__drawAxis()
    
    def set_title(self, title, pad=20):
        """
        Sets the title for the subplot
        """
        self.ax.set_title(title, pad=pad)

# Create the figure
fig = plt.figure(figsize=(15, 6))

# First subplot
axes1 = myAxes(fig, 131, xlim=(-2,2), ylim=(-2,2))
axes1.draw()
rectangle = patch.Rectangle((0,0), 3, 3, fc='black', ec="black", alpha=.2)
axes1.ax.add_patch(rectangle)
axes1.set_title("(A) Non-negative orthant", pad=50)

# Second subplot
axes2 = myAxes(fig, 132, xlim=(-2,2), ylim=(-2,2))
axes2.draw()
circle = patch.Circle((0,0), 1, fc='black', ec="black", alpha=.2)
axes2.ax.add_patch(circle)
axes2.set_title("(B) Unit ball", pad=50)

# Third subplot
axes3 = myAxes(fig, 133, xlim=(-2,2), ylim=(-2,2))
axes3.draw()
circle = patch.Circle((0,0), 1, fc='black', ec="black", alpha=.2)
axes3.ax.add_patch(circle)
rectangle = patch.Rectangle((0,0), 3, 3, fc='black', ec="black", alpha=.2)
axes3.ax.add_patch(rectangle)
axes3.set_title("(C) Intersection of non-negative  \northant and unit ball")

fig.tight_layout()

fname = "rdpg_space"
if mode == "png":
    fig.savefig("Figures/{}.{}".format(fname, mode))
    fig.savefig("Figures/{}.svg".format(fname))
else:
    fig.savefig("Figures/{}.svg".format(fname))
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
Cell [0;32mIn[2], line 95[0m
[1;32m     93[0m fname [38;5;241m=[39m [38;5;124m"[39m[38;5;124mrdpg_space[39m[38;5;124m"[39m
[1;32m     94[0m [38;5;28;01mif[39;00m mode [38;5;241m==[39m [38;5;124m"[39m[38;5;124mpng[39m[38;5;124m"[39m:
[0;32m---> 95[0m     [43mfig[49m[38;5;241;43m.[39;49m[43msavefig[49m[43m([49m[38;5;124;43m"[39;49m[38;5;124;43mFigures/[39;49m[38;5;132;43;01m{}[39;49;00m[38;5;124;43m.[39;49m[38;5;132;43;01m{}[39;49;00m[38;5;124;43m"[39;49m[38;5;241;43m.[39;49m[43mformat[49m[43m([49m[43mfname[49m[43m,[49m[43m [49m[43mmode[49m[43m)[49m[43m)[49m
[1;32m     96[0m     fig[38;5;241m.[39msavefig([38;5;124m"[39m[38;5;124mFigures/[39m[38;5;132;01m{}[39;00m[38;5;124m.svg[39m[38;5;124m"[39m[38;5;241m.[39mformat(fname))
[1;32m     97[0m [38;5;28;01melse[39;00m:

File [0;32m/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/matplotlib/figure.py:3395[0m, in [0;36mFigure.savefig[0;34m(self, fname, transparent, **kwargs)[0m
[1;32m   3393[0m     [38;5;28;01mfor[39;00m ax [38;5;129;01min[39;00m [38;5;28mself[39m[38;5;241m.[39maxes:
[1;32m   3394[0m         _recursively_make_axes_transparent(stack, ax)
[0;32m-> 3395[0m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mcanvas[49m[38;5;241;43m.[39;49m[43mprint_figure[49m[43m([49m[43mfname[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/matplotlib/backend_bases.py:2204[0m, in [0;36mFigureCanvasBase.print_figure[0;34m(self, filename, dpi, facecolor, edgecolor, orientation, format, bbox_inches, pad_inches, bbox_extra_artists, backend, **kwargs)[0m
[1;32m   2200[0m [38;5;28;01mtry[39;00m:
[1;32m   2201[0m     [38;5;66;03m# _get_renderer may change the figure dpi (as vector formats[39;00m
[1;32m   2202[0m     [38;5;66;03m# force the figure dpi to 72), so we need to set it again here.[39;00m
[1;32m   2203[0m     [38;5;28;01mwith[39;00m cbook[38;5;241m.[39m_setattr_cm([38;5;28mself[39m[38;5;241m.[39mfigure, dpi[38;5;241m=[39mdpi):
[0;32m-> 2204[0m         result [38;5;241m=[39m [43mprint_method[49m[43m([49m
[1;32m   2205[0m [43m            [49m[43mfilename[49m[43m,[49m
[1;32m   2206[0m [43m            [49m[43mfacecolor[49m[38;5;241;43m=[39;49m[43mfacecolor[49m[43m,[49m
[1;32m   2207[0m [43m            [49m[43medgecolor[49m[38;5;241;43m=[39;49m[43medgecolor[49m[43m,[49m
[1;32m   2208[0m [43m            [49m[43morientation[49m[38;5;241;43m=[39;49m[43morientation[49m[43m,[49m
[1;32m   2209[0m [43m            [49m[43mbbox_inches_restore[49m[38;5;241;43m=[39;49m[43m_bbox_inches_restore[49m[43m,[49m
[1;32m   2210[0m [43m            [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m   2211[0m [38;5;28;01mfinally[39;00m:
[1;32m   2212[0m     [38;5;28;01mif[39;00m bbox_inches [38;5;129;01mand[39;00m restore_bbox:

File [0;32m/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/matplotlib/backend_bases.py:2054[0m, in [0;36mFigureCanvasBase._switch_canvas_and_return_print_method.<locals>.<lambda>[0;34m(*args, **kwargs)[0m
[1;32m   2050[0m     optional_kws [38;5;241m=[39m {  [38;5;66;03m# Passed by print_figure for other renderers.[39;00m
[1;32m   2051[0m         [38;5;124m"[39m[38;5;124mdpi[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124mfacecolor[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124medgecolor[39m[38;5;124m"[39m, [38;5;124m"[39m[38;5;124morientation[39m[38;5;124m"[39m,
[1;32m   2052[0m         [38;5;124m"[39m[38;5;124mbbox_inches_restore[39m[38;5;124m"[39m}
[1;32m   2053[0m     skip [38;5;241m=[39m optional_kws [38;5;241m-[39m {[38;5;241m*[39minspect[38;5;241m.[39msignature(meth)[38;5;241m.[39mparameters}
[0;32m-> 2054[0m     print_method [38;5;241m=[39m functools[38;5;241m.[39mwraps(meth)([38;5;28;01mlambda[39;00m [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs: [43mmeth[49m[43m([49m
[1;32m   2055[0m [43m        [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43m{[49m[43mk[49m[43m:[49m[43m [49m[43mv[49m[43m [49m[38;5;28;43;01mfor[39;49;00m[43m [49m[43mk[49m[43m,[49m[43m [49m[43mv[49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mkwargs[49m[38;5;241;43m.[39;49m[43mitems[49m[43m([49m[43m)[49m[43m [49m[38;5;28;43;01mif[39;49;00m[43m [49m[43mk[49m[43m [49m[38;5;129;43;01mnot[39;49;00m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mskip[49m[43m}[49m[43m)[49m)
[1;32m   2056[0m [38;5;28;01melse[39;00m:  [38;5;66;03m# Let third-parties do as they see fit.[39;00m
[1;32m   2057[0m     print_method [38;5;241m=[39m meth

File [0;32m/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/matplotlib/backends/backend_agg.py:496[0m, in [0;36mFigureCanvasAgg.print_png[0;34m(self, filename_or_obj, metadata, pil_kwargs)[0m
[1;32m    449[0m [38;5;28;01mdef[39;00m [38;5;21mprint_png[39m([38;5;28mself[39m, filename_or_obj, [38;5;241m*[39m, metadata[38;5;241m=[39m[38;5;28;01mNone[39;00m, pil_kwargs[38;5;241m=[39m[38;5;28;01mNone[39;00m):
[1;32m    450[0m [38;5;250m    [39m[38;5;124;03m"""[39;00m
[1;32m    451[0m [38;5;124;03m    Write the figure to a PNG file.[39;00m
[1;32m    452[0m 
[0;32m   (...)[0m
[1;32m    494[0m [38;5;124;03m        *metadata*, including the default 'Software' key.[39;00m
[1;32m    495[0m [38;5;124;03m    """[39;00m
[0;32m--> 496[0m     [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_print_pil[49m[43m([49m[43mfilename_or_obj[49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mpng[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[43mpil_kwargs[49m[43m,[49m[43m [49m[43mmetadata[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/matplotlib/backends/backend_agg.py:445[0m, in [0;36mFigureCanvasAgg._print_pil[0;34m(self, filename_or_obj, fmt, pil_kwargs, metadata)[0m
[1;32m    440[0m [38;5;250m[39m[38;5;124;03m"""[39;00m
[1;32m    441[0m [38;5;124;03mDraw the canvas, then save it using `.image.imsave` (to which[39;00m
[1;32m    442[0m [38;5;124;03m*pil_kwargs* and *metadata* are forwarded).[39;00m
[1;32m    443[0m [38;5;124;03m"""[39;00m
[1;32m    444[0m FigureCanvasAgg[38;5;241m.[39mdraw([38;5;28mself[39m)
[0;32m--> 445[0m [43mmpl[49m[38;5;241;43m.[39;49m[43mimage[49m[38;5;241;43m.[39;49m[43mimsave[49m[43m([49m
[1;32m    446[0m [43m    [49m[43mfilename_or_obj[49m[43m,[49m[43m [49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mbuffer_rgba[49m[43m([49m[43m)[49m[43m,[49m[43m [49m[38;5;28;43mformat[39;49m[38;5;241;43m=[39;49m[43mfmt[49m[43m,[49m[43m [49m[43morigin[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mupper[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m    447[0m [43m    [49m[43mdpi[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mfigure[49m[38;5;241;43m.[39;49m[43mdpi[49m[43m,[49m[43m [49m[43mmetadata[49m[38;5;241;43m=[39;49m[43mmetadata[49m[43m,[49m[43m [49m[43mpil_kwargs[49m[38;5;241;43m=[39;49m[43mpil_kwargs[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/matplotlib/image.py:1676[0m, in [0;36mimsave[0;34m(fname, arr, vmin, vmax, cmap, format, origin, dpi, metadata, pil_kwargs)[0m
[1;32m   1674[0m pil_kwargs[38;5;241m.[39msetdefault([38;5;124m"[39m[38;5;124mformat[39m[38;5;124m"[39m, [38;5;28mformat[39m)
[1;32m   1675[0m pil_kwargs[38;5;241m.[39msetdefault([38;5;124m"[39m[38;5;124mdpi[39m[38;5;124m"[39m, (dpi, dpi))
[0;32m-> 1676[0m [43mimage[49m[38;5;241;43m.[39;49m[43msave[49m[43m([49m[43mfname[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mpil_kwargs[49m[43m)[49m

File [0;32m/opt/hostedtoolcache/Python/3.12.5/x64/lib/python3.12/site-packages/PIL/Image.py:2563[0m, in [0;36mImage.save[0;34m(self, fp, format, **params)[0m
[1;32m   2561[0m         fp [38;5;241m=[39m builtins[38;5;241m.[39mopen(filename, [38;5;124m"[39m[38;5;124mr+b[39m[38;5;124m"[39m)
[1;32m   2562[0m     [38;5;28;01melse[39;00m:
[0;32m-> 2563[0m         fp [38;5;241m=[39m [43mbuiltins[49m[38;5;241;43m.[39;49m[43mopen[49m[43m([49m[43mfilename[49m[43m,[49m[43m [49m[38;5;124;43m"[39;49m[38;5;124;43mw+b[39;49m[38;5;124;43m"[39;49m[43m)[49m
[1;32m   2564[0m [38;5;28;01melse[39;00m:
[1;32m   2565[0m     fp [38;5;241m=[39m cast(IO[[38;5;28mbytes[39m], fp)

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: '/home/runner/work/textbook_figs/textbook_figs/textbook/Appendix/AppA/Figures/rdpg_space.png'

